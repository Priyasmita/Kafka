stages:
  - build
  - test
  - security_scan
  - tag
  - upload
  - deploy

variables:
  # Define base version numbers
  MAJOR: "1"
  MINOR: "1"
  PATCH: "${CI_PIPELINE_ID}"

before_script:
  - 'echo "CI Pipeline ID: ${CI_PIPELINE_ID}"'

# Build Stage: Build the .NET project
build:
  stage: build
  script:
    - 'echo "Building the project"'
    - 'dotnet build YourProject.sln'

# Test Stage: Run the tests
test:
  stage: test
  script:
    - 'echo "Running tests"'
    - 'dotnet test YourProject.sln'

# Security Scan Stage: Perform a security scan (using a tool like SonarQube)
security_scan:
  stage: security_scan
  script:
    - 'echo "Running security scan"'
    - 'dotnet sonarscanner begin /k:"your_project_key" /d:sonar.login="${SONARQUBE_TOKEN}"'
    - 'dotnet build'
    - 'dotnet sonarscanner end /d:sonar.login="${SONARQUBE_TOKEN}"'

# Tag Stage: Tag the version
tag:
  stage: tag
  script:
    - >
      if [[ "${CI_COMMIT_REF_NAME}" =~ ^release.*|main$ ]]; then
        VERSION="${MAJOR}.${MINOR}.${PATCH}"
      else
        VERSION="${MAJOR}.${MINOR}.${PATCH}-Snapshot"
      fi
    - 'echo "Version: ${VERSION}"'
    - 'git tag -a "v${VERSION}" -m "Release version ${VERSION}"'
    - 'git push origin "v${VERSION}"'

# Upload Stage: Upload artifact to NuGet
upload:
  stage: upload
  script:
    - 'echo "Uploading to NuGet"'
    - 'dotnet nuget push YourPackage.nupkg --api-key "${NUGET_API_KEY}" --source "https://api.nuget.org/v3/index.json"'

# Deploy Stage: Deploy to the dev environment if the branch is main or starts with release
deploy:
  stage: deploy
  script:
    - 'echo "Deploying to the Dev environment"'
    - >
      if [[ "${CI_COMMIT_REF_NAME}" =~ ^release.*|main$ ]]; then
        echo "Deploying to Dev environment..."
        # Your deployment script goes here (e.g., using Azure, AWS, etc.)
      else
        echo "Not deploying because the branch is not main or release.*"
      fi
  only:
    - main
    - /^release.*$/
