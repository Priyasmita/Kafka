using System;
using System.Threading;
using System.Threading.Tasks;
using TIBCO.EMS;
using EmsToKafkaService.Configuration;
using EmsToKafkaService.Interfaces;
using Newtonsoft.Json;
using Serilog;

namespace EmsToKafkaService.Services
{
    public class HeartbeatService : IHeartbeatService
    {
        private readonly EmsConfiguration _config;
        private readonly ILogger _logger;
        private Connection _connection;
        private Session _session;
        private MessageProducer _producer;
        private readonly TimeSpan _heartbeatInterval = TimeSpan.FromSeconds(30);

        public HeartbeatService(EmsConfiguration config, ILogger logger)
        {
            _config = config;
            _logger = logger;
            InitializeConnection();
        }

        private void InitializeConnection()
        {
            try
            {
                var factory = new ConnectionFactory(_config.ServerUrl);
                _connection = factory.CreateConnection(_config.Username, _config.Password);
                _connection.Start();
                
                _session = _connection.CreateSession(false, Session.AUTO_ACKNOWLEDGE);
                var queue = _session.CreateQueue(_config.HeartbeatQueueName);
                _producer = _session.CreateProducer(queue);
                
                _logger.Information("Heartbeat service connected to EMS");
            }
            catch (Exception ex)
            {
                _logger.Error(ex, "Failed to initialize heartbeat connection");
                throw;
            }
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            _logger.Information("Heartbeat service started");
            
            while (!cancellationToken.IsCancellationRequested)
            {
                try
                {
                    SendHeartbeat();
                    await Task.Delay(_heartbeatInterval, cancellationToken);
                }
                catch (TaskCanceledException)
                {
                    break;
                }
                catch (Exception ex)
                {
                    _logger.Error(ex, "Error sending heartbeat");
                    await Task.Delay(TimeSpan.FromSeconds(5), cancellationToken);
                }
            }
            
            _logger.Information("Heartbeat service stopped");
        }

        private void SendHeartbeat()
        {
            var heartbeatData = new
            {
                ServiceName = "EmsToKafkaService",
                Timestamp = DateTime.UtcNow,
                Status = "Alive",
                MachineName = Environment.MachineName
            };

            var json = JsonConvert.SerializeObject(heartbeatData);
            var message = _session.CreateTextMessage(json);
            
            _producer.Send(message);
            _logger.Debug("Heartbeat sent at {Timestamp}", heartbeatData.Timestamp);
        }

        public void Dispose()
        {
            _producer?.Close();
            _session?.Close();
            _connection?.Close();
        }
    }
}
